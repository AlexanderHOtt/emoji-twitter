import { SignInButton, SignOutButton, useUser } from "@clerk/nextjs";
import { type NextPage } from "next";
import Head from "next/head";
import Image from "next/image";
import Link from "next/link";
import relativeTime from "dayjs/plugin/relativeTime";

import dayjs from "dayjs";

import { api, type RouterOutputs } from "~/utils/api";
import { LoadingPage } from "~/components/Loading";
import { useState } from "react";

dayjs.extend(relativeTime);

const CreatePostWizard = () => {
  const { user } = useUser();
  const ctx = api.useContext();
  const { mutate, isLoading: isPosting } = api.post.create.useMutation({
    onSuccess: () => {
      setContent("");
      // `void` tells typescript that we don't care about the result of the promise
      void ctx.post.getAll.invalidate();
    },
  });
  const [content, setContent] = useState("");

  if (!user) return null;

  return (
    <div className="flex w-full gap-3">
      <Image
        width={56}
        height={56}
        src={user.profileImageUrl}
        alt="pfp"
        className="h-14 w-14 rounded-full"
      />
      <input
        placeholder="Type some emojis"
        className="grow bg-transparent outline-none"
        value={content}
        onChange={(e) => setContent(e.target.value)}
        disabled={isPosting}
      />
      <button onClick={() => mutate({ content })}>Post</button>
    </div>
  );
};

type PostWithUser = RouterOutputs["post"]["getAll"][number];
const PostView = (props: PostWithUser) => {
  const { post, author } = props;
  return (
    <div className="flex  border-b border-slate-400 p-8" key={post.id}>
      <Image
        width={36}
        height={36}
        src={author.profileImageUrl}
        alt="pfp"
        className="h-12 w-12 rounded-full"
      />
      <div className="flex flex-col">
        <div className="flex text-slate-300">
          <span>{`@${author.username}`}</span>
          <span className="px-1">Â·</span>
          <span className="text-slate-400">
            {dayjs(post.createdAt).fromNow()}
          </span>
        </div>
        <span className="text-2xl">{post.content}</span>
      </div>
    </div>
  );
};

const Feed = () => {
  const {
    data: posts,
    isLoading: postIsLoading,
    error: postError,
  } = api.post.getAll.useQuery();

  if (postIsLoading) return <LoadingPage />;

  if (postError)
    return (
      <div className="grid h-screen w-screen place-items-center">
        Failed to load posts
      </div>
    );

  return (
    <div className="flex flex-col">
      {posts?.map(({ post, author }) => (
        <PostView key={post.id} post={post} author={author} />
      ))}
    </div>
  );
};

const Home: NextPage = () => {
  const { user, isLoaded: userIsLoaded, isSignedIn } = useUser();

  // start loading posts immediately
  api.post.getAll.useQuery();

  if (!userIsLoaded) return <div />;

  return (
    <>
      <Head>
        <title>Create T3 App</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className=" flex h-screen justify-center">
        <div className="w-full border-x border-slate-400 md:max-w-2xl">
          <div className="flex border-b border-slate-400 p-4">
            {isSignedIn && <CreatePostWizard />}
            {!isSignedIn && <SignInButton />}
          </div>
          <Feed />
        </div>
      </main>
    </>
  );
};

export default Home;
